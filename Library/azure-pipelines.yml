trigger:
  batch: true
  branches:
    include:
      - master

resources:
  containers:
    - container: pg11
      image: ionx/postgres-plv8:11.1
      ports:
        - 5432:5432
    - container: pg10
      image: ionx/postgres-plv8:10.6
      ports:
        - 5432:5432
    - container: pg9.6
      image: mysticmind/postgres-plv8:9.6-1.4
      ports:
        - 5432:5432

variables:
  config: Release
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  dotnet_core_version: 3.1.x
  pg_db: postgres_net_test
  testing_database: "Host=localhost;Port=5432;Database=postgres_net_test;Username=postgres;Password=Password12!"
  solution_path: Library/Postgres.NET.sln
jobs:
    ###################################
    #   Build
    ###################################
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    # strategy:
      # matrix:
        # pg9.6:
          # postgresService: pg9.6
        # pg10:
          # postgresService: pg10
        # pg11:
          # postgresService: pg11
    steps:
      - task: UseDotNet@2
        displayName: Install .Net Core
        inputs:
          version: $(dotnet_core_version)
          performMultiLevelLookup: true

      - task: DotNetCoreCLI@2
        displayName: Restore Packages
        inputs:
          command: restore
          projects: $(solution_path)

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: build
          projects: $(solution_path)
          arguments: '--configuration $(config)'

    ###################################
    #   Test
    ###################################
  - job: Test
    dependsOn: Build
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        pg9.6:
          postgresService: pg9.6
        pg10:
          postgresService: pg10
        pg11:
          postgresService: pg11
    services:
      postgres: $[ variables['postgresService'] ]
    steps:
      - script: |
          PG_CONTAINER_NAME=$(docker ps --filter expose=5432/tcp --format {{.Names}})
          docker exec $PG_CONTAINER_NAME psql -U postgres -c "create database $(pg_db);"
        displayName: Create test database

      - task: UseDotNet@2
        displayName: Install .Net Core
        inputs:
          version: $(dotnet_core_version)
          performMultiLevelLookup: true
          
      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          projects: '$(Build.ArtifactStagingDirectory)/$(solution_path)'
          arguments: '--configuration $(config)'

    ###################################
    #   Publish NuGet
    ###################################
  - job: Publish_NuGet
    dependsOn: Test
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - task: DotNetCoreCLI@2
        displayName: Pack
        inputs:
          command: pack
          projects: $(solution_path)
          packDestination: '$(Build.ArtifactStagingDirectory)'
          versioningScheme: byPrereleaseNumber

      - task: NuGetCommand@2
        displayName: Publish packages to NuGet
        inputs:
          command: 'push'
          nuGetFeedType: 'external'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
          publishFeedCredentials: 'NuGet'

      - task: NuGetCommand@2
        displayName: Publish symbol packages to NuGet
        inputs:
            command: 'push'
            nuGetFeedType: 'external'
            packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.snupkg'
            publishFeedCredentials: 'NuGet'
