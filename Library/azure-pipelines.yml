name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)
trigger:
  batch: true
  branches:
    include:
      - master

resources:
  containers:
    - container: pg11
      image: ionx/postgres-plv8:11.1
      ports:
        - 5432:5432
    - container: pg10
      image: ionx/postgres-plv8:10.6
      ports:
        - 5432:5432
    - container: pg9.6
      image: mysticmind/postgres-plv8:9.6-1.4
      ports:
        - 5432:5432

variables:
  config: Release
  dotnet_core_version: 3.1.x
  pg_db: postgres_net_test
  testing_database: "Host=localhost;Port=5432;Database=postgres_net_test;Username=postgres;Password=Password12!"
  solution_path: Library/Postgres.NET.sln
  major: 1
  minor: 0
  patch: $[counter(variables['minor'], 0)] #this will reset when we bump minor
  NugetVersion: $(major).$(minor).$(patch)
  AlphaNugetVersion: $(major).$(minor).$(patch)-alpha.1
jobs:
    ###################################
    #   Build
    ###################################
  - job: Build
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-16.04'
        mac:
          imageName: 'macos-10.14'
        windows:
          imageName: 'vs2017-win2016'
    pool:
      vmImage: $(imageName)
    steps:
      - checkout: self
      - task: UseDotNet@2
        displayName: Install .Net Core
        inputs:
          version: $(dotnet_core_version)
          performMultiLevelLookup: true

      - task: DotNetCoreCLI@2
        displayName: Restore Packages
        inputs:
          command: restore
          projects: $(solution_path)

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: build
          projects: $(solution_path)
          arguments: '--configuration $(config) --no-restore'

      - task: CopyFiles@2
        displayName: Copy Built Source Code
        condition: eq( variables['Agent.OS'], 'Linux' )
        inputs:
          contents:  |
            **
            !.git/**/*
          targetFolder: $(Build.ArtifactStagingDirectory)

      - task: PublishBuildArtifacts@1
        displayName: Publish Built Source Code
        condition: eq( variables['Agent.OS'], 'Linux' )
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: BuiltSourceCode

    ###################################
    #   Test
    ###################################
  - job: Test
    dependsOn: Build
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        pg9.6:
          postgresService: pg9.6
        pg10:
          postgresService: pg10
        pg11:
          postgresService: pg11
    services:
      postgres: $[ variables['postgresService'] ]
    steps:
      - checkout: none #skip checking out the default repository resource

      - task: DownloadBuildArtifacts@0
        displayName: 'Download Built Source Code'
        inputs:
          artifactName: BuiltSourceCode
          downloadPath: $(Build.SourcesDirectory)

      - script: |
          PG_CONTAINER_NAME=$(docker ps --filter expose=5432/tcp --format {{.Names}})
          docker exec $PG_CONTAINER_NAME psql -U postgres -c "create database $(pg_db);"
        displayName: Create test database

      - task: UseDotNet@2
        displayName: Install .Net Core
        inputs:
          version: $(dotnet_core_version)
          performMultiLevelLookup: true

      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          nobuild: true
          projects: '$(Build.SourcesDirectory)/BuiltSourceCode/$(solution_path)'
          arguments: '--configuration $(config)'

    ###################################
    #   Publish NuGet
    ###################################
  - job: Publish_NuGet
    dependsOn: Test
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: none #skip checking out the default repository resource

      - task: DownloadBuildArtifacts@0
        displayName: 'Download Built Source Code'
        inputs:
          artifactName: BuiltSourceCode
          downloadPath: $(Build.SourcesDirectory)

      - task: DotNetCoreCLI@2
        displayName: Pack
        inputs:
          command: pack
          projects: '$(Build.SourcesDirectory)/BuiltSourceCode/$(solution_path)'
          arguments: '--configuration $(config)'
          packDestination: '$(Build.ArtifactStagingDirectory)'
          versioningScheme: 'byEnvVar'
          versionEnvVar: 'AlphaNugetVersion'

      - task: NuGetCommand@2
        displayName: Publish packages to NuGet
        inputs:
          command: 'push'
          nuGetFeedType: 'external'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
          publishFeedCredentials: 'NuGet'

      - task: NuGetCommand@2
        displayName: Publish symbol packages to NuGet
        inputs:
          command: 'push'
          nuGetFeedType: 'external'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.snupkg'
          publishFeedCredentials: 'NuGet'

    ###################################
    #   Verify compatibility
    ###################################
  - job: Verify_compatibility
    dependsOn: Publish_NuGet
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        client1:
          repositoryUrl: 'https://github.com/oskardudycz/AzurePipelinesSamples'
          path: Clients/Client1
        client2:
          repositoryUrl: 'https://github.com/oskardudycz/AzurePipelinesSamples'
          path: Clients/Client2
    steps:
    - template: steps-compatibility-check.yml  # Template reference
      parameters:
        repositoryUrl: $(repositoryUrl)
        dotnet_core_version: $(dotnet_core_version)
        solution_path: $(path)
        config: $(config)
