jobs:
  ####################################################
  #   JOB 2: Test with different PG versions
  ####################################################
  - job: Test
    dependsOn: Build
    pool:
      ################################################
      # Use Linux VM image
      ################################################
      vmImage: 'ubuntu-16.04'
    strategy:
      ################################################
      #  Matrix build for
      #  Different PG Versions
      ################################################
      matrix:
        pg9.6:
          postgresService: pg9.6
        pg10:
          postgresService: pg10
        pg11:
          postgresService: pg11
    services:
      ################################################
      #  Start Postgres Docker image
      ################################################
      postgres: $[ variables['postgresService'] ]
    steps:
      ################################################
      # Step 0: No checkout as we're getting
      #         built code from artifacts
      ################################################
      - checkout: none

      ################################################
      # Step 1: Get built source code
      #         from build artifacts
      ################################################
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Built Source Code'
        inputs:
          artifactName: BuiltSourceCode
          downloadPath: $(Build.SourcesDirectory)

      ################################################
      # Step 2: Setup Postgres database
      #         for tests
      ################################################
      - script: |
          PG_CONTAINER_NAME=$(docker ps --filter expose=5432/tcp --format {{.Names}})
          docker exec $PG_CONTAINER_NAME psql -U postgres -c "create database $(pg_db);"
        displayName: Create test database

      ################################################
      # Step 3: Install .NET Core
      ################################################
      - task: UseDotNet@2
        displayName: Install .Net Core
        inputs:
          version: $(dotnet_core_version)
          performMultiLevelLookup: true

      ################################################
      # Step 4: Run tests
      ################################################
      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          nobuild: true
          projects: '$(Build.SourcesDirectory)/BuiltSourceCode/$(solution_path)'
          arguments: '--configuration $(config)'
